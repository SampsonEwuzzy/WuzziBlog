"""
Django settings for WuzziBlog project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv
import cloudinary # Import the cloudinary library
import cloudinary.uploader
import cloudinary.api

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent


# Secret key (use env var in production)
SECRET_KEY = os.environ.get("SECRET_KEY", "dev-secret-key")

# Debug toggle (defaults to True locally, set DEBUG=False on Render)
DEBUG = os.environ.get("DEBUG", "True") == "True"

# Allowed hosts
ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".onrender.com"]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'ckeditor',
    'ckeditor_uploader',
    'cloudinary',
    'cloudinary_storage',

    # Project apps
    'posts',
    'users',
]

# --- Cloudinary Configuration ---
# Use the CLOUDINARY_URL environment variable to configure the main library
CLOUDINARY_URL = os.environ.get("CLOUDINARY_URL")
cloudinary.config(
    cloud_name = os.environ.get('CLOUDINARY_CLOUD_NAME', 'dkuceshx9'),
    api_key = os.environ.get('CLOUDINARY_API_KEY', '579141783434638'),
    api_secret = os.environ.get('CLOUDINARY_API_SECRET', 'Cd6H4OxVhgGORp8AF3BOA7Hl_7A')
)

# This dictionary is specifically for the Cloudinary Storage backend
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME', 'dkuceshx9'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY', '579141783434638'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET', 'Cd6H4OxVhgGORp8AF3BOA7Hl_7A')
}

# Tell Django to use Cloudinary for media storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# --- End Cloudinary Configuration ---

CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'WuzziBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'WuzziBlog.wsgi.application'


# Database (uses DATABASE_URL on Render, SQLite locally)
DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',
        conn_max_age=600
    )
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files
STATIC_URL = '/static/'

# Always define STATIC_ROOT so collectstatic works in all environments
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Optional: if you have extra static dirs inside your project
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CKEditor configuration
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['Source'],
            ['Image', 'Table', 'HorizontalRule']
        ],
        'width': '100%',
        'extraPlugins': 'uploadimage',
    }
}

CKEDITOR_UPLOAD_PATH = 'ckeditor/'


# User Authentication URLs
LOGOUT_REDIRECT_URL = "posts:home"
LOGIN_REDIRECT_URL = "posts:home"
LOGIN_URL = "users:login"
LOGOUT_REDIRECT_ALLOW_GET = True


# Email Backend configuration (use env vars for safety)
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_LOCALTIME = True